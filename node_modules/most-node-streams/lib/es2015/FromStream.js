import { never } from 'most';
import { MulticastSource } from '@most/multicast';
import { FromStreamDisposable } from './FromStreamDisposable';
import { addListeners } from './addListeners';
export class FromStream extends MulticastSource {
    constructor(stream, endEventName, dataEventName) {
        super(never().source);
        this.stream = stream;
        this.endEventName = endEventName;
        this.dataEventName = dataEventName;
    }
    run(sink, scheduler) {
        const n = this.add(sink);
        if (n === 1) {
            const stream = this.stream;
            this._disposable =
                addListeners(stream, this.endEventName, this.dataEventName, sink, scheduler);
            if (typeof stream.resume === 'function') {
                stream.resume();
            }
        }
        return new FromStreamDisposable(this, sink);
    }
}
//# sourceMappingURL=FromStream.js.map