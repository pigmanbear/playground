import { Stream } from 'most';
import { FromStream } from './FromStream';
export function fromStream(nodeStream, options = {}) {
    const { endEventName = 'end', dataEventName = 'data' } = options;
    if (typeof nodeStream.pause === 'function')
        nodeStream.pause();
    return new Stream(new FromStream(nodeStream, endEventName, dataEventName));
}
export function fromReadable(nodeStream, dataEventName = 'data') {
    return fromStream(nodeStream, { dataEventName, endEventName: 'end' });
}
export function fromWritable(nodeStream) {
    return fromStream(nodeStream, { endEventName: 'finish' });
}
export function toWritable(nodeStream, stream) {
    return stream.subscribe({
        next(x) {
            nodeStream.write(x);
        },
        error(e) {
            nodeStream.emit('error', e);
        },
        complete() {
            // process.stdout && process.stderr are not closable
            if (!nodeStream.isStdio) {
                nodeStream.end();
            }
        },
    });
}
//# sourceMappingURL=index.js.map